#!/bin/bash

# -----------------------------------------------------------------------------
#
#   Copyright 2019 Praveen G Shirali <praveengshirali@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# -----------------------------------------------------------------------------


log () { echo -e "$@"; }
errlog () { >&2 log "$@"; }
err () { >&2 log "ERROR:" "$@"; }

readonly _WORKBENCH_VERSION=0.0.1
readonly _PROG="${0##*/}"

WORKBENCH_BENCH_EXTN="${WORKBENCH_BENCH_EXTN:-bench}"
WORKBENCH_SHELF_FILE="${WORKBENCH_SHELF_FILE:-wb.shelf}"
WORKBENCH_GREPPER="${WORKBENCH_GREPPER:-egrep}"

WORKBENCH_ACTIVATE_CMD="${WORKBENCH_ACTIVATE_CMD:-/bin/bash --rcfile}"
WORKBENCH_COMMAND_CMD="${WORKBENCH_COMMAND_CMD:-/bin/bash -c}"

WORKBENCH_ACTIVATE_FUNC="${WORKBENCH_ACTIVATE_FUNC:-workbench_OnActivate}"
WORKBENCH_COMMAND_FUNC="${WORKBENCH_COMMAND_FUNC:-workbench_OnCommand}"
WORKBENCH_NEW_FUNC="${WORKBENCH_NEW_FUNC:-workbench_OnNew}"

ERR_FATAL=1
ERR_MISSING=3
ERR_INVALID=4
ERR_DECLINED=5
ERR_EXISTS=6


#   The `workbench_pre_execute_hook` is a function that gets called just
#   before a workbench executes. This allows code in the
#   `workbench_pre_execute_hook` to perform any user-defined-checks
#   For example: detect changes in WORKBENCH_HOME.
#
#   The function in WorkBench is a no-op. The WORKBENCH_RC is expected to
#   override this function. WorkBench will exit with the returnCode from
#   `workbench_pre_execute_hook` if the returnCode is non-zero.
#
workbench_pre_execute_hook () { :; }


_wb_check_realpath () {
    realpath --help 2> /dev/null 1> /dev/null
    if [[ $? -ne 0 ]] && [[ -z "${WORKBENCH_ALLOW_INSECURE_PATH}" ]]; then
        errlog " ┌──────────────────────────────────────────────────────────┐"
        errlog " │                                                          │"
        errlog " │                    *** WARNING ***                       │"
        errlog " │                                                          │"
        errlog " │  The CLI utility 'realpath' (part of GNU Coreutils) was  │"
        errlog " │  not found on this system. Please install it.            │"
        errlog " │                                                          │"
        errlog " │  Run: 'realpath --help' to verify installation           │"
        errlog " │                                                          │"
        errlog " │  For information on security implications, please refer  │"
        errlog " │  to the 'Using WorkBench > Security' section of          │"
        errlog " │  WorkBench's documentation at: https://wb.rtfd.io        │"
        errlog " │                                                          │"
        errlog " └──────────────────────────────────────────────────────────┘"
        exit 1
    fi
}
_wb_realpath () {
    realpath --help 2> /dev/null 1> /dev/null
    if [[ $? -ne 0 ]]; then
        echo "$1"
    else
        [[ -n "$1" ]] && realpath -m "$1"
    fi
}
_wb_check_valid_abspath () {
    if [[ "${1:0:1}" != "/" ]]; then
        err "Invalid absolute path: '$1'. Does not begin with '/'"
        return $ERR_INVALID
    fi
}
_wb_print_path_if_child () {
    if [[ -z "${WORKBENCH_ALLOW_INSECURE_PATH}" ]]; then
        realpath --help 2> /dev/null 1> /dev/null
        if [[ $? -eq 0 ]]; then
            local ret
            local toCheck="$(_wb_realpath $1)"
            local prefix="$(_wb_realpath $2)"
            _wb_check_valid_abspath "$toCheck"
            ret=$?
            [[ $ret -ne 0 ]] && return $ret
            _wb_check_valid_abspath "$prefix"
            ret=$?
            [[ $ret -ne 0 ]] && return $ret
            local prefixLen=${#prefix}
            local toCheckPrefix="${toCheck:0:$prefixLen}"
            if [[ "$toCheckPrefix" != "$prefix" ]]; then
                err "Item '${toCheck}' lies outside '${prefix}'. Disallowed."
                return $ERR_INVALID
            fi
            echo "${toCheck}"
        else
            #   This is a strict check on each call: `_wb_print_path_if_child`
            #   A similar check is done using `_wb_check_realpath` on launch
            #   for convenience. But it could be bypassed.
            err "FATAL: 'realpath' not found. Can't compose absolute paths."
            err "       WORKBENCH_ALLOW_INSECURE_PATH not set either."
            exit $ERR_FATAL
        fi
    else
        echo "$1"
    fi
}

_wb_consume_rcfile () {
    local wbrc="${HOME}/.workbenchrc"
    if [[ -z "${WORKBENCH_RC}" ]] && [[ -n "${HOME}" ]] && [[ -f "${wbrc}" ]]
    then
        WORKBENCH_RC="${wbrc}"
    fi
    if [[ -n ${WORKBENCH_RC} ]]; then
        if [[ -f "${WORKBENCH_RC}" ]]; then
            source "${WORKBENCH_RC}"
        else
            err "Can't find WORKBENCH_RC: '${WORKBENCH_RC}'"
            exit $ERR_MISSING
        fi
    fi
}

_wb_init_workbench_home () {
    [[ -z "${WORKBENCH_HOME}" ]] && WORKBENCH_HOME="${HOME}/.workbench"
    mkdir -p "${WORKBENCH_HOME}"
    if [[ ! -d "${WORKBENCH_HOME}" ]]; then
        err "WORKBENCH_HOME (${WORKBENCH_HOME}) does not exist. Quitting!"
        exit $ERR_MISSING
    fi
}

_wb_confirm () {
    if [[ -z "${WORKBENCH_AUTOCONFIRM}" ]]; then
        read -e -r -p "$@ [y/N] " ans
        if [[ "$ans" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            return 0
        else
            return $ERR_DECLINED
        fi
    else
        return 0
    fi
}

_wb_list () {
    # $1 = shelf|bench
    local findByName
    local substitute
    case "$1" in
        shelf)
            findByName="${WORKBENCH_SHELF_FILE}"
            substitute="${WORKBENCH_SHELF_FILE}"
            ;;
        bench)
            findByName="*.${WORKBENCH_BENCH_EXTN}"
            substitute=".${WORKBENCH_BENCH_EXTN}"
            ;;
    esac

    find "${WORKBENCH_HOME}" -type f -name "${findByName}" | while read i; do

        local relPath="$(echo ${i#${WORKBENCH_HOME}} | sed 's|^/*||g')"
        local relName="$(echo ${relPath/%${substitute}/})"
        [[ -z "${relName}" ]] && local relName="/"
        log "${relName}"

    done | sort
}

_wb_file_for_shelf () {
    local len=${#1}
    local stripName
    ((len--))
    if [[ "${1:$len:1}" != "/" ]]; then
        err "Shelf name must end with a '/'. Got '$1'"
        return $ERR_INVALID
    fi
    stripName="$(echo $1 | sed 's|^/*||g' | sed 's|/*$||g')"
    [[ -n "${stripName}" ]] && stripName="${stripName}/"
    local shelfFile="${WORKBENCH_HOME}/${stripName}${WORKBENCH_SHELF_FILE}"
    _wb_print_path_if_child "${shelfFile}" "${WORKBENCH_HOME}"
    return $?
}

_wb_file_for_bench () {
    local len=${#1}
    ((len--))
    if [[ "${1:$len:1}" == "/" ]]; then
        err "Bench name must NOT end with a '/'. Got '$1'"
        return $ERR_INVALID
    fi
    local stripName="$(echo $1 | sed 's|^/*||g')"
    local benchFile="${WORKBENCH_HOME}/${stripName}.${WORKBENCH_BENCH_EXTN}"
    _wb_print_path_if_child "${benchFile}" "${WORKBENCH_HOME}"
    return $?
}

_wb_do_vars () { set | ${WORKBENCH_GREPPER} "^WORKBENCH_\w+=" | sort; }

_wb_help_operate () {
    local cmd="$1"
    local single="$2"
    local plural="$3"
    cat <<EOF

 ══ USAGE ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     ${_PROG} ${cmd} [options] <${single}Name> [[arg]..]


 ══ OPTIONS ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     -n, --new     Don't error on names which don't exist.
                   Use this switch to create new files.
     -y, --yes     Don't prompt for confirmation on 'rm'
                   Sets WORKBENCH_AUTOCONFIRM to true.


 ══ DESCRIPTION ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     ${_PROG} ${cmd}
        Lists ${plural}

     ${_PROG} ${cmd} <${single}Name>
        Prints the absolute path to the underlying resource file
        for the <${single}Name>. A non-zero exitCode is returned
        if the <${single}Name> does not exist.

     ${_PROG} ${cmd} [options] <${single}Name> [[arg]..]
        Execute a command (with optional args) on the underlying
        resource file for the <${single}Name>.

        Example:
            ${_PROG} ${cmd} [options] <${single}Name> ls -l
            ${_PROG} ${cmd} [options] <${single}Name> less
            ${_PROG} ${cmd} [options] <${single}Name> vim
            etc.

        A missing <${single}Name> results in an error.
        You can pass '-n' or '--new' to create create the underlying
        folder structure and resource file.

        If the first command in [[arg]..] is 'rm', then an interactive
        confirmation prompt is presented. This can be skipped by
        passing '-y' or '--yes'.

        It can also be skipped automatically by setting:
        WORKBENCH_AUTOCONFIRM to any non-empty value.

EOF
}
_wb_do_operate () {
    local resource="$1"; shift                # shelf|bench
    if [[ "$1" = "-h" ]] || [[ "$1"  = "--help" ]]; then
        case "$resource" in
            shelf) _wb_help_operate "s" "shelf" "shelves" && exit 0;;
            bench) _wb_help_operate "b" "bench" "benches" && exit 0;;
        esac
    fi
    local allowNew
    local yes
    while [[ -n "$1" ]]
        do case "$1" in
            -n|--new) allowNew="1"; shift;;
            -y|--yes) yes="1"; shift;;
            *) break;;
        esac
    done
    if [[ -z "$@" ]]; then
        _wb_list "${resource}"
    else
        local resourceName="$1"; shift
        local resourceFile
        local exitCode
        resourceFile="$(_wb_file_for_${resource} ${resourceName})"
        exitCode="$?"
        [[ "${exitCode}" != "0" ]] && exit "${exitCode}"
        if [[ -z "$@" ]]; then
            if [[ -f "${resourceFile}" ]]; then
                log "${resourceFile}"
                exit 0
            else
                errlog "${resourceFile}"
                exit $ERR_MISSING
            fi
        else
            if [[ -n "${allowNew}" ]]; then
                mkdir -p "$(dirname ${resourceFile})"
                touch "${resourceFile}"
            fi
            if [[ -f "${resourceFile}" ]]; then
                [[ -n "${yes}" ]] && WORKBENCH_AUTOCONFIRM=1
                if [[ "$1" == "rm" ]]; then
                    _wb_confirm "Execute '$@' on '${resourceFile}' ?"
                    exitCode="$?"
                    [[ "${exitCode}" != "0" ]] && exit "${exitCode}"
                fi
                "$@" "${resourceFile}"
            else
                err "${resource} '${resourceName}' does not exist!"
                exit $ERR_MISSING
            fi
        fi
    fi
}

_wb_compose_initcode () {
    local resourceName="$1"
    cat <<EOF
# ------------------------------------------------------------
#  Auto-generated by WorkBench $_WORKBENCH_VERSION
# ------------------------------------------------------------
if [[ -n "\${WORKBENCH_ENV_NAME}" ]]; then
    echo "Cannot activate environment '${resourceName}'."
    echo "You are already inside '\${WORKBENCH_ENV_NAME}'"
    builtin exit 1
fi
workbench_OnNew () { echo \$@; }
workbench_OnActivate () { :; }
workbench_OnCommand () { "\$@"; }
export WORKBENCH_SHELF_FILE="${WORKBENCH_SHELF_FILE}"
export WORKBENCH_BENCH_EXTN="${WORKBENCH_BENCH_EXTN}"
export WORKBENCH_ENV_NAME="${resourceName}"
export ORIG_PS1="\${PS1}"
export PS1="[\${WORKBENCH_ENV_NAME}] \${PS1}"
export WORKBENCH_ACTIVATE_FUNC="${WORKBENCH_ACTIVATE_FUNC}"
export WORKBENCH_COMMAND_FUNC="${WORKBENCH_COMMAND_FUNC}"
export WORKBENCH_NEW_FUNC="${WORKBENCH_NEW_FUNC}"
# ------------------------------------------------------------
EOF
}
_wb_compose_source () {
    local resourceFile="$1"
    local srcPath="$(printf "%s\n" ${resourceFile#${WORKBENCH_HOME}} \
                   | sed 's|^/||g')"
    local srcDir="$(dirname ${srcPath})"
    local root="${WORKBENCH_HOME}"
    local chain

    if [[ -f "${root}/${WORKBENCH_SHELF_FILE}" ]]; then
        printf "source \"${root}/${WORKBENCH_SHELF_FILE}\"\n"

        # ":" suffix is OK as a bench will be appended as the last value
        chain="${chain}${root}/${WORKBENCH_SHELF_FILE}:"
    fi

    for part in $(set -f; IFS=/; printf "%s\n" ${srcDir}); do
        root="${root}/${part}"
        local shelfFile="${root}/${WORKBENCH_SHELF_FILE}"
        if [[ -f "${shelfFile}" ]]; then
            printf "source \"${shelfFile}\"\n"
            chain="${chain}${shelfFile}:"
        fi
    done

    printf "source \"${resourceFile}\"\n"
    chain="${chain}${resourceFile}"
    printf "export WORKBENCH_CHAIN='${chain}'"
    echo
}
_wb_compose_code () {
    local resourceName="$1"
    local resourceFile="$2"
    local cmd="$3"

    _wb_compose_initcode "${resourceName}"
    _wb_compose_source   "${resourceFile}"

    # entrypoint
    case "${cmd}" in
        a) printf '"${WORKBENCH_ACTIVATE_FUNC}"';;
        c) printf '"${WORKBENCH_COMMAND_FUNC}"';;
        n) printf '"${WORKBENCH_NEW_FUNC}"';;
    esac
    if [[ -n "${@:4}" ]]; then
        for i in "${@:4}"; do printf ' "%s"' "$i"; done
    fi
    printf '\n'
}
_wb_help_execute () {
    cat <<EOF

 ══ USAGE ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     ${_PROG} <a|c|n> [--dump] <benchName> [[arg]..]

          a        Activate a workbench in a new interactive subshell
                   Entrypoint:
                    └─ WORKBENCH_ACTIVATE_FUNC=${WORKBENCH_ACTIVATE_FUNC}

          c        Run a command from a workbench in the current shell
                   Entrypoint:
                    └─ WORKBENCH_COMMAND_FUNC=${WORKBENCH_COMMAND_FUNC}

          n        Create a new bench by executing shell code from:
                   Entrypoint:
                    └─ WORKBENCH_NEW_FUNC=${WORKBENCH_NEW_FUNC}

                   NOTE: You need to supply a new <benchName> with
                         the 'n' command. The command displays existing
                         benches to help you choose your new <benchName>
                         by modifying off an existing name.

          Arguments [[arg]..] are passed as-is to the entrypoint function.


 ══ OPTIONS ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     -d, --dump    Dump the auto-generated init script on stdout.
                   This switch does not validate the presence
                   of <benchName> on the disk. Use this switch to
                   review the workbench code.

EOF
}
_wb_do_execute () {
    local cmd="$1"; shift                # command: a|c|n
    [[ "$1" = "-h" ]] || [[ "$1"  = "--help" ]] && _wb_help_execute && exit 0
    local dumpCode
    case "$1" in
        -d|--dump) dumpCode="1"; shift;;
    esac
    if [[ -z "$@" ]]; then
        _wb_list "bench"
    else
        local resourceName="$1"; shift
        local resourceFile
        local exitCode
        resourceFile="$(_wb_file_for_bench ${resourceName})"
        exitCode="$?"
        [[ "${exitCode}" != "0" ]] && exit "${exitCode}"

        if [[ "${dumpCode}" != "1" ]]; then
            if [[ "${cmd}" == "n" ]]; then
                if [[ -s "${resourceFile}" ]]; then
                    err "Bench '${resourceName}' exists: '${resourceFile}'"
                    err "Cannot create a new workbench."
                    exit $ERR_EXISTS
                fi
                mkdir -p "$(dirname ${resourceFile})"
                touch "${resourceFile}"
            fi
            if [[ ! -f "${resourceFile}" ]]; then
                err "Bench '${resourceName}' does not exist. Quitting!"
                exit $ERR_MISSING
            fi
        fi

        local executor
        case "${cmd}" in
            a) executor="${WORKBENCH_ACTIVATE_CMD}";;
            c) executor="${WORKBENCH_COMMAND_CMD}";;
            n) executor="${WORKBENCH_COMMAND_CMD}";;
        esac

        workbench_pre_execute_hook
        local exitCode=$?
        [[ $exitCode -ne 0 ]] && exit $exitCode

        resourceName="$(echo ${resourceName} | sed 's|^/*||g')"
        if [[ ${dumpCode} == "1" ]]; then
            _wb_compose_code "${resourceName}" "${resourceFile}" \
                             "${cmd}" "$@"
        else
            local tmpFile
            tmpFile=`mktemp`
            if [[ "$?" != "0" ]]; then
                err "Failed to create temp file using 'mktemp'. Quitting!"
                exit $ERR_FATAL
            fi
            chmod +x "${tmpFile}"
            if [[ "$?" != "0" ]]; then
                err "Failed to set exec permission on workbench. Quitting!"
                exit $ERR_FATAL
            fi
            _wb_compose_code "${resourceName}" "${resourceFile}" \
                             "${cmd}" "$@" > "${tmpFile}"
            ${executor} "${tmpFile}"
            rm -f "${tmpFile}"
        fi
    fi
}

_wb_show_help () {
    cat <<EOF

    ╔═╗       ┌─────╔═╗
    ╙ W 0 R K B E N C H                         Version ${_WORKBENCH_VERSION}


 ══ USAGE ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     [[ENV=<value>]...] ${_PROG} <command> [args]


 ══ ENV CONFIGURATION ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     WORKBENCH_RC=<rcfile>
        Source a supplied rcfile before execution. If unspecified,
        then the default location '\$HOME/.workbenchrc' is tried.


 ══ COMMANDS (Use '-h' for additional help/options [+]) ─ ─ ─ ─ ─ ─ ─ ─


    -V     Show version and quit
    -E     Show WORKBENCH environment variables and quit

     s     List shelves. Operate on a shelf file.               [+]
     b     List benches. Operate on a bench file.               [+]

     a     List benches. Activate a workbench.                  [+]
     c     List benches. Run a command from a workbench.        [+]
     n     List benches. Create a new bench.                    [+]


 ══ DESCRIPTION ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     WorkBench is a hierarchical environment manager for the shell.
     You can use it to build project-specific virtualenvs, each having
     its own set of env variables, aliases and functions.

     WorkBench builds an environment (called 'workbench') by overlaying
     shell code from files residing at different directory depths (called
     'shelves') within a WORKBENCH_HOME directory, followed by a file
     which overrides all shelves (called 'bench').

     Refer to the documentation for more details:
     URL: https://wb.readthedocs.io


 ══ LICENSE ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─

     Apache 2.0 -- https://www.apache.org/licenses/LICENSE-2.0

     Copyright 2018-19 Praveen G Shirali <praveengshirali@gmail.com>
     https://github.com/pshirali/workbench


EOF
}
main () {
    _wb_consume_rcfile
    _wb_check_realpath
    WORKBENCH_HOME=$(_wb_realpath "${WORKBENCH_HOME}")
    WORKBENCH_HOME="$(echo ${WORKBENCH_HOME} | sed 's|/*$||g')"
    _wb_init_workbench_home
    if [[ -z "$1" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        _wb_show_help
        exit 0
    fi

    case "$1" in
        -V) log "${_WORKBENCH_VERSION}";;
        -E) _wb_do_vars;;

        s) shift; _wb_do_operate "shelf" "$@";;
        b) shift; _wb_do_operate "bench" "$@";;

        a) shift; _wb_do_execute "a" "$@";;
        c) shift; _wb_do_execute "c" "$@";;
        n) shift; _wb_do_execute "n" "$@";;

        *) err "Unknown command '$1'. Run '${_PROG} -h' for help." && exit 1;;
    esac
}


main "$@"
